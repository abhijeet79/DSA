struct Node{
    Node *links[26];
    bool flag=false;
    bool contains_node(char ch){
        return (links[ch-'a']!=NULL);
    }
    Node* get(char ch){
        return links[ch-'a'];
    }
    Node* put(char ch,Node* node){
        links[ch-'a']=node;
        return node;
    }
    void setflag( ){
        flag=true;
    }
    bool getflag(){
        return flag;
    }

};
____________________________________________________________________________
____________________________________________________________________________

#include <bits/stdc++.h>
struct Node{
    int startswith_count=0;
    int endswith_count=0;
    Node *links[26];
    bool flag=false;
    bool contains_node(char ch){
        return (links[ch-'a']!=NULL);
    }
    Node *get(char ch){
        return links[ch-'a'];
    }
    Node* put(char ch,Node* node){
        links[ch-'a']=node;
        return node;
    }
    void setflag( ){
        flag=true;
    }
    bool getflag(){
        return flag;
    }
    void start_increase(){
        startswith_count++;
    }
    void end_increase(){
        endswith_count++;
    }
    int get_start(){
        return startswith_count;
    }
    int get_end(){
        return endswith_count;
    }
    void del_start(){
        startswith_count--;
    }
    void del_end(){
        endswith_count--;
    }

}; 
class Trie {
private:
   Node *root;

public:

    /** Initialize your data structure here. */
    Trie() {
        root=new Node;

    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* node =root;
        for(int i=0;i<word.size();++i){
            if(!node->contains_node(word[i])){
                node=node->put(word[i],new Node);
            }
            else node =node->get(word[i]);
        }
        node->setflag();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node *node =root;
        for(int i=0;i<word.size();++i){
            if(!node->contains_node(word[i])){
                return false;
            }
            else node =node->get(word[i]);
        }
        return node->getflag();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node *node =root;
        for(int i=0;i<prefix.size();++i){
            if(!node->contains_node(prefix[i])){
                return false;
            }
            else node =node->get(prefix[i]);
        }
        return true;
    }
};
